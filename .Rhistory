library(gageData)
biocLite(gageData)
source("http://bioconductor.org/biocLite.R")
biocLite(gageData)
biocLite("gageData")
library(gageData)
data(go.sets.hs)
go.sets.hs
data(go.subs.hs)
go.subs.hs
lapply(go.subs.hs, head)
load("C:/Users/Clarence/Dropbox/rnaseq-workflow/.RData")
cuff <- readCufflinks(dir = system.file("extdata", package = "cummeRbund"))
library(cummeRbund)
cuff <- readCufflinks(dir = system.file("extdata", package = "cummeRbund"))
cuff.exprs <- repFpkmMatrix(genes(cuff))
cuff.exprs[rowSums(cuff.exprs > 0) != 0, ]
head(cuff.exprs[rowSums(cuff.exprs > 0) != 0, ])
nrow(cuff.exprs[rowSums(cuff.exprs > 0) != 0, ])
cuff.exprs <- cuff.exprs[rowSums(cuff.exprs > 0) != 0, ]
cuff.gsets <- list(row.names(cuff.exprs))
cuff.ref <- 3:4
cuff.samp <- 5:6
gage(cuff.exprs, cuff.gsets, cuff.ref, cuff.samp)
library(gage)
gage(cuff.exprs, cuff.gsets, cuff.ref, cuff.samp)
gage(cuff.exprs, cuff.gsets)
gage(cuff.exprs, cuff.gsets)
data(gse16873)
cn=colnames(gse16873)
hn=grep('HN',cn, ignore.case =TRUE)
dcis=grep('DCIS',cn, ignore.case =TRUE)
data(kegg.gs)
data(go.gs)
nrows(cn)
nrow(cn)
gse16873.kegg.p <- gage(gse16873, gsets = kegg.gs,
ref = hn, samp = dcis)
head(gse16873.kegg.p)
head(gse16873.kegg.p)
head(gse16873.kegg.p, 10)
summary(gse16873.kegg.p, 10)
head(gse16873.kegg.p$greater)
head(gse16873.kegg.p$greater)
kegg.gs
head(kegg.gs)
kegg
gage(cuff.exprs, kegg.gs, cuff.ref, cuff.samp)
cuff.exprs
head(cuff.exprs)
head(rownames(cuff.exprs))
lapply(rownames(cuff.exprs), sym2eg)
data("egSymb")
lapply(rownames(cuff.exprs), sym2eg)
rownames(cuff.exprs)
getGenes(cuff,genes(cuff))
getSig(cuff, level="genes", alpha=0.05)
size(getSig(cuff, level="genes", alpha=0.05))
length(getSig(cuff, level="genes", alpha=0.05))
class(getSig(cuff, level="genes", alpha=0.05))
getSig(cuff, level="genes", alpha=0.05)
diffGeneIDs <- getSig(cuff, level="genes", alpha=0.05)
diffGenes <- getGenes(cuff, diffGeneIDs)
featureNames(diffGenes)
gnames <- featureNames(diffGenes)
gnames[gnames$gene_short_name != "<NA>" ]
gnames[gnames$gene_short_name != "<NA>"]
gnames[gnames != "<NA>"]
gnames[gnames != "NA"]
gnames[gnames == "NA"]
gnames[gnames != "NA"]
gnames[, gnames != "NA"]
gnames[gnames$gene_short_name != "NA"]
gnames$gene_short_name != "NA"
gnames[is.na(gnames$gene_short_name)]
gnames[,is.na(gnames$gene_short_name)]
is.na(gnames$gene_short_name)
gnames
gnames$gene_short_name[1]
gnames$gene_short_name[2]
gnames$gene_short_name[[2]]
class(gnames$gene_short_name)
gnames$gene_short_name(2)
list(is.na(gnames$gene_short_name))
gnames[c(is.na(gnames$gene_short_name))]
gnames[,c(is.na(gnames$gene_short_name))]
gnames[c(is.na(gnames$gene_short_name))]
shiny::runApp('C:/Users/Clarence/Dropbox/rnaseq-workflow')
installed.packages()
library(Gviz)
install.packages('Gviz')
source("https://bioconductor.org/biocLite.R")
biocLite("Gviz")
runApp('C:/Users/Clarence/Dropbox/rnaseq-workflow')
library(Gbiz)
library(Gviz)
biocLite('Gviz')
runApp('C:/Users/Clarence/Dropbox/rnaseq-workflow')
source("http://bioconductor.org/biocLite.R")
biocLite("cummeRbund")''
data(smokers)
data(smoke)
data(Smokers)
data(Smoking)
data('Smoking')
data(smoke)
data('smoke')
data(esoph)
summary(esoph)
head(esoph)
head(esoph)
tail(esoph)
esopj
esoph
setwd('../Dropbox/rnaseq-workflow/')
library(cummeRbund)
cuff <- readCufflinks('data/cuffdiff_out_pLKO1_vs_shLPA2/')
data(sampleData)
getGenes(cuff, sampleIDs)
shiny::runApp()
remove(cuff)
runApp()
heatmap.g <- fpkmMatrix(genes(cuff))
cuff <- readCufflinks('data/cuffdiff_out_pLKO1_vs_shLPA2/')
heatmap.g <- fpkmMatrix(genes(cuff))
class(heatmap.g)
head(heatmap.g)
heatmap.g[[g1]]
heatmap.g[[q1]]
heatmap.g[['q1']]
names(heatmap.g)
names(heatmap.g) != 'q1'
heatmap.g[[names(heatmap.g) != 'q1']]
names(heatmap.g)[['q1']]
names(heatmap.g)['q1']
names(heatmap.g)
names(heatmap.g)[names(heatmap.g) != 'q1']
heatmap.g
scale(heatmap.g)
runApp()
x <- matrix(1:10, ncol = 2)
x
centered.x <- scale(x, scale = FALSE)
centered.x
head(melt(as.matrix(heatmap.g)))
runApp()
scale(melt(as.matrix(heatmap.g)))
melt(as.matrix(heatmapg))
melt(as.matrix(heatmap.g))
head(melt(as.matrix(heatmap.g)))
class(melt(as.matrix(heatmap.g)))
(melt(heatmap.g))
class((melt(heatmap.g)))
scale((melt(heatmap.g)))
scale(as.matrix(melt(heatmap.g)))
head(melt(as.matrix(heatmap.g)))
head(melt(heatmap.g))
matrix(melt(heatmap.g))
as.matrix(melt(heatmap.g))
head(as.matrix(melt(heatmap.g)))
scale(as.matrix(melt(heatmap.g))[2])
scale(as.matrix(melt(heatmap.g))[[2])
scale(as.matrix(melt(heatmap.g))[[2]])
class(as.matrix(melt(heatmap.g))[[2]])
as.numeric(as.matrix(melt(heatmap.g))[[2]])
head(as.matrix(melt(heatmap.g))[[2]])
head(as.matrix(melt(heatmap.g))[1])
head(as.matrix(melt(heatmap.g))[2])
head(as.matrix(melt(heatmap.g))[2,])
head(as.matrix(melt(heatmap.g))[,2])
class(as.matrix(melt(heatmap.g))[,2])
as.numeric(as.matrix(melt(heatmap.g))[,2])
scale(as.numeric(as.matrix(melt(heatmap.g))[,2]))
as.matrix(melt(heatmap.g))[1,]
as.matrix(melt(heatmap.g))[,1]
rbind(c(1,1), c(2,2))
cbind(c(1,1), c(2,2))
runApp()
as.matrix(melt(heatmap.g))
head(as.matrix(melt(heatmap.g)))
melt(heatmap.g)
head(melt(heatmap.g))
head(heatmap.g)
melt(heatmap.g)
as.matrix(heatmap.g)
melt(as.matrix(heatmap.g))
names(melt(as.matrix(heatmap.g)))
melt(as.matrix(heatmap.g))[['Var1']]
runApp()
runApp()
class(as.data.frame(heatmap.z))
scaled <- scale(as.numeric(as.matrix(melt(heatmap.g))[, 2]))
heatmap.z <- cbind(as.matrix(melt(heatmap.g))[, 1], scaled)
rownames(heatmap.z) <- melt(as.matrix(heatmap.g))[['Var1']]
as.data.frame(heatmap.z)
rownames(heatmap.z)
as.data.frame(heatmap.z)
kheatmap.g
heatmap.g
freeze
